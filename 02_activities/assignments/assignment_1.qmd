---
title: "Assignment #1"
format: html
---

## Submission Information

ðŸš¨ **Please review our [Assignment Submission Guide](https://github.com/UofT-DSI/onboarding/blob/main/onboarding_documents/submissions.md)** ðŸš¨ for detailed instructions on how to format, branch, and submit your work. Following these guidelines is crucial for your submissions to be evaluated correctly.

### Submission Parameters:

-   Submission Due Date: \`FILL IN\`
-   The branch name for your repo should be: `assignment-1`
-   What to submit for this assignment:
    -   This Quarto document (assignment_1.qmd) should be populated and should be the only change in your pull request.
-   What the pull request link should look like for this assignment: `https://github.com/<your_github_username>/r/pull/<pr_id>`
    -   Open a private window in your browser. Copy and paste the link to your pull request into the address bar. Make sure you can see your pull request properly. This helps the technical facilitator and learning support staff review your submission easily.

### Checklist:

-   Create a branch called `assignment-1`.
-   Ensure that your repository is public.
-   Review [the PR description guidelines](https://github.com/UofT-DSI/onboarding/blob/main/onboarding_documents/submissions.md#guidelines-for-pull-request-descriptions) and adhere to them.
-   Verify that your link is accessible in a private browser window.

### Grading criteria:

| Criteria | Pass | Fail |
|----|----|----|
| **General criteria** |  |  |
| Code execution | All code cells execute without errors. | Any code cell produces an error upon execution. |
| Code quality | Code is well-organized, concise, and includes necessary comments for clarity. | Code is unorganized, verbose, or lacks necessary comments. |

## Part 1: Lucky Postal Codes

As part of a contest, Michael is giving a prize to participants whose numbers in their postal codes add up to 7. For example,

-   The postal code `M5S 1A1` is a winner: 5 + 1 + 1 adds up to 7

-   The postal code `K7L 3N6` is not a winner: 7 + 3 + 6 adds up to 16

Write a function `check_for_winner` that checks whether a postal code should receive a prize. The function should return `TRUE` if the postal code numbers add up to 7, and should return `FALSE` otherwise. You can assume that the postal code is always entered correctly in `A1A 1A1` format.

**Hint**: from the `stringr` package, the `str_sub` function extracts characters from specific positions in a string.

```{r}
# Write your code in this function
function check_for_winner(postal_code) {
  # Write your code here
}
```

Test your functions here:

```{r}
check_for_winner("H0H 0H0")
```

```{r}
check_for_winner("L8S 4L8")
```

## Part 2: Entry Errors

Participants frequently make two mistakes in entering their postal code:

1.  They enter it without a space: e.g. `A1A1A1`
2.  They enter it without proper capitalization: e.g. `a1a 1a1`

They might also enter their postal codes with combinations of these two mistakes, e.g. `A1a1a1` or `a1A1a1`. Write a function `fix_mistakes` that takes these mistyped postal codes and returns the correct postal code to `A1A 1A1` format. The function only needs to accommodate combinations of these two mistakes. For example, you can assume that entries like `A1 A1A1` or `A11 AA1` do not appear.

```{r}
function fix_mistakes(entered_code) {
  # Write your code here
}

```

Test your functions here:

```{r}
fix_mistakes("a1A1A1") # should return A1A 1A1
```

```{r}
fix_mistakes("M5h 2n2") # should return M5H 2N2
```
