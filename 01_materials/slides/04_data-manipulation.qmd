---
title: "Data Manipulation: Part 1"
format: html
---

In this lesson, we will be learning about data manipulation in R using tools from the `tidyverse`.

## Contents

1.  Loading data
2.  Subsetting and organizing data (`filter`, `select`, `arrange`)
3.  The pipe operator (`|>`)
4.  Transforming data (`mutate`, `group_by`, `summarise`)
5.  Application: data cleaning

## 1. Loading data

Each data file format requires its own read-in function:

| file type           | function     | library  |
|---------------------|--------------|----------|
| .csv                | `read_csv`   | `readr`  |
| .tsv                | `read_tsv`   | `readr`  |
| .xlsx (Excel sheet) | `read_excel` | `readxl` |
| .sav (SPSS)         | `read_sav`   | `haven`  |
| .dta (Stata)        | `read_dta`   | `haven`  |
| .sas (SAS)          | `read_sas`   | `haven`  |

```{r}
library(tidyverse)

ads_data <- haven::read_sav("../../05_src/slides_data/ads_raw.sav")
```

```{r}
glimpse(ads_data)
```

## 2. Subsetting and organizing data

Three key functions:

-   `filter()` selects rows based on specific criteria
-   `select()` selects columns using their names
-   `arrange()` sorts columns (e.g. numerically, alphabetically, or by date)

------------------------------------------------------------------------

### Filtering

Filtering allows us to select rows based on specific traits

```{r}
filter(ads_data, Duration__in_seconds_ < 100)
```

### Arranging

Arranging allows us to sort the order of the table by a certain column

```{r}
arrange(ads_data, Duration__in_seconds_)
```

------------------------------------------------------------------------

### Selecting

Selecting allows us to pick certain columns

```{r}
select(ads_data, RecordedDate)
```

We can also remove columns

```{r}
select(ads_data, -Consent, -DistributionChannel)
```

## 3. The pipe operator

What if we want to do multiple operations on the data in one go?

For example:

1.  Filter `ads_data` for durations less than 100 seconds, THEN
2.  Sort the data in order of increasing durations, THEN
3.  Pick out the recorded date (`RecordedDate`) and duration (`Duration__in_seconds`)

```{r}
select(
  arrange(
    filter(
      ads_data, 
      Duration__in_seconds_ < 100
    ), Duration__in_seconds_
  ), RecordedDate, Duration__in_seconds
)
```

We can instead use the pipe `|>` which passes an object into the next function as the first argument.

```{r}
filter(ads_data, Duration__in_seconds < 100)
# is the same as
ads_data |> filter(Duration__in_seconds < 100)
```

So that instead of using nested functions, we can write:

```{r}
ads_data |>
  filter(Duration__in_seconds_ < 100) |>
  arrange(Duration__in_seconds_) |>
  select(RecordedDate, Duration__in_seconds_)
```

## 4. Transforming data

-   `mutate()` creates new columns that are functions of existing columns

-   `summarise()` is used to compute summary statistics across the entire data frame or groups of rows

-   `group_by()` is used to define groups of rows in the data frame (by which to summarise)

### Mutate

`mutate()` creates new columns that are functions of existing variables.

It can also modify (if the name is the same as an existing column)

For example, let's say we want to create a new column named `Birthyear_add_day` that takes the column Birthyear and joins it with a provided string ("-07-01").

```{r}
ads_data <- ads_data |>
  # Add July 1 as birth day
  mutate(Birthyear_add_day = str_c(Birthyear, "-07-01")) |> 
  # Convert date to date-time format
  mutate(Birthyear_add_day = as_datetime(Birthyear_add_day))

# View data
ads_data |>
  select(EndDate, Birthyear, Birthyear_add_day)
```

For example, lets say we want to create a new column named `age` that takes the column `EndDate` and subtracts the column `Birthyear_add_day`

```{r}
ads_data %>%
  mutate(age = EndDate - Birthyear_add_day) %>%
  select(EndDate, Birthyear, Birthyear_add_day, age) 
```

### Summarise

We may need to find the average (mean), median, or standard deviation of some of the variables in our data frame. These common functions already come with R:

```{r}
# Define a vector 
numbers <- c(1, 5, 9, 13)

mean(numbers) # Calculate the mean
median(numbers) # Calculate the median
sd(numbers) # Calculate the standard deviation
```

We can apply these in a data frame with `summarise()`, which returns the result in a new data frame.

```{r}
ads_data |>
  summarise(
    mean_time = mean(Duration__in_seconds_, na.rm = TRUE),
    sd_time = sd(Duration__in_seconds_, na.rm = TRUE)
  )

ads_data |>
  summarise(num_ads = n())
```

Note that if there are missing values, we need to include `na.rm = TRUE` to ignore them in the calculation.

### Grouping

Before summarising, we can group by a categorical variable using `group_by()`. Then `summarise()` will create a new data frame and return one row for each combination of grouping variables;

```{r}
ads_data |>
  group_by(Gender) |> # I want to summarise the data separately for each Gender
  summarise(
    # Count of observations within each group, and the mean and sd of duration:
    num_ads = n(), 
    mean_time = mean(Duration__in_seconds_, na.rm = TRUE),
    sd_time = sd(Duration__in_seconds_, na.rm = TRUE)
  )
```

## 5. Application: data cleaning

We will apply some of these skills to prepare a dataset for analysis. The file `05_src/slides_data/toronto_city_council_attendance_2018-2022.csv` contains data on whether members of Toronto City Council were present at meetings that they were expected to attend. See [the Toronto Open Data webpage](https://open.toronto.ca/dataset/members-of-toronto-city-council-meeting-attendance/) for details.

### Data cleaning

```{r}
council_attendance_raw <- read_csv("../../05_src/slides_data/toronto_city_council_attendance_2018-2022.csv")

head(council_attendance)
```

Let's only keep columns that contain relevant information. We can remove the `_id` column (which is not useful to us) and `Term` (which in this case is only 2018-2022).

```{r}
council_attendance <- council_attendance_raw |>
  select(-`_id`, -Term)
```

Currently the first and last names are in separate columns. We can join them together so we only have one name field:

```{r}
council_attendance <- council_attendance |>
  mutate(Name = str_c(FirstName, " ", LastName)) |>
  select(-FirstName, -LastName)
```

Most of the meeting times are in `00:00AM - 00:00PM` format in the `SessionStart_EndTime` column. We can change the meeting start and end times so that they have their own columns. We can use the `separate_wider_delim()` function to do this, but some of the entries aren't in this format, so we need to add the `too_few` argument.

```{r}
# See which times aren't in the right format
council_attendance |>
  filter(!str_detect(SessionStart_EndTime, " - "))

council_attendance <- council_attendance |>
  separate_wider_delim(SessionStart_EndTime, delim = " - ", names = c("StartTime", "EndTime"), too_few = "align_start")

head(council_attendance)
```

The meeting times are already in 24H format, meaning the `AM` and `PM` suffixes are redundant. We can remove them:

```{r}
council_attendance <- council_attendance |> 
  mutate(StartTime = str_remove(StartTime, "AM|PM")) |> # using the `|` operator matches both AM and PM
  mutate(EndTime = str_remove(EndTime, "AM|PM"))

head(council_attendance)
```

In order to perform date-time operations, we need to combine the `SessionDate` , `StartTime`, and `EndTime` columns. We can do this with tools from the `lubridate` package:

```{r}
council_attendance <- council_attendance |>
  mutate(StartDateTime = str_c(SessionDate, " ", StartTime)) |>  # concatenate date and time
  mutate(EndDateTime = str_c(SessionDate, " ", EndTime)) |>
  mutate(
    StartDateTime = ymd_hm(StartDateTime), # convert to date-time object
    EndDateTime = ymd_hm(EndDateTime)
  ) |>
  select(-StartTime, -EndTime)

head(council_attendance)
```

The column `SessionType` contains information on whether the meeting was in the Morning, Afternoon, or Evening. If we were to sort these with the `arrange` function, they would be sorted alphabetically (Afternoon \> Evening \> Morning), but the more logical order is Morning \> Afternoon \> Evening. We can do this by coding this variable into a factor:

```{r}
# See what happens when we sort
council_attendance |> 
  arrange(SessionType) |>
  head()

council_attendance |>
  arrange(SessionType) |>
  tail()

# Code into a factor
council_attendance <- council_attendance |>
  mutate(SessionType = factor(
    SessionType, 
    levels = c("Morning", "Afternoon", "Evening")
    )
  )

# Now morning sessions should be first
council_attendance |> 
  arrange(SessionType) |>
  head()

# ...and evening sessions should be lat
council_attendance |>
  arrange(SessionType) |>
  head()
```

### Answering questions from the data

How many city council meetings were there in total? Since there are multiple entries for each meeting (one for each councillor), this isn't as simple as counting the number of rows. We can assume that there is only one city council meeting at a given time, and find how many unique entries there are with `distinct()` .

```{r}
council_attendance |>
  filter(Committee == "City Council") |> # look only at city council meetings
  distinct(StartDateTime)
```

How many city council meetings did each councillor attend? We need to first look only at City Council meetings (`filter`), consider each councillor individually (`group_by`) and then count the number of meetings (`summarise`):

```{r}
council_attendance |>
  filter(Committee == "City Council") |> # look only at city council meetings
  group_by(Name) |>
  summarise(attended = sum(Present == "Y"))
```

What was the longest meeting? We can find the difference between the start and end times by subtracting them:

```{r}
council_attendance |>
  mutate(SessionDuration = EndDateTime - StartDateTime) |> 
  select(Committee, SessionDate, SessionDuration) |> 
  distinct() |> 
  arrange(desc(SessionDuration))
```

## Exercises

1.  Look only at City Council meetings that lasted 30 minutes or longer. Who attended the most of these meetings?
2.  Which city councillor has the lowest proportion of meetings attended?
3.  What proportion of Mark Grimes's morning meetings did he attend?
4.  There are 4 "community council" committees. For each of them separately, find the average duration of their meetings.
5.  How many different committees are in the dataset?
